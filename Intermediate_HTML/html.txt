## EMMET ##
- ! followed by ENTER gives HTML boilerplate.
- alt + a for wrapping 
- alt + b for removing selected tags.
- tag.classname to create tag with class.
- tag#idname to create tag with id.
- can create multiple ids and classed on one tag.
- button[type=button] crete button with button type.
- div>h1>p to create nested elements.
- ul>li*3 to create 3 li.
- $ adds numbers incrementally. so li-$ will have 1,2,3 as numbers.
- > add child so to add sibling use + along with brackets :)).
- { } to add text content. h1 {hello world}.

## SVG ##
- images can be scaled without decreasing quality or increasing filesize.
- used as .xml
- good for simple images bad for complex images.

<div class="container">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
    <rect x=0 y=0 width=100 height=100 fill="burlywood"/>
    <path d="M 10 10 H 90 V 90 L 10 60" fill="transparent" stroke="black" stroke-width="3"/>
  <circle cx=50 cy=50 r=20 class="svg-circle"/>
    <g class="svg-text-group">
      <text x="20" y="25" rotate="10" id="hello-text">Hello!</text>
      <use href="#hello-text" x="-10" y="65" fill="white"/>
    </g>
</svg>
</div>

- xmlns refers to dialect of svg being used.
- viewbox defines bounds including aspect ratio and origin.
- Elements such as <circle>, <rect>, <path>, and <text> are defined by the SVG namespace.

- svg can used ith <img> or linking with css background-image: url(./my-image.svg); 
- ilining to display content but slows html due to extra code being written.



