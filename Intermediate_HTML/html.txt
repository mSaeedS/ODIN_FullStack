## EMMET ##
- ! followed by ENTER gives HTML boilerplate.
- alt + a for wrapping 
- alt + b for removing selected tags.
- tag.classname to create tag with class.
- tag#idname to create tag with id.
- can create multiple ids and classed on one tag.
- button[type=button] crete button with button type.
- div>h1>p to create nested elements.
- ul>li*3 to create 3 li.
- $ adds numbers incrementally. so li-$ will have 1,2,3 as numbers.
- > add child so to add sibling use + along with brackets :)).
- { } to add text content. h1 {hello world}.

## SVG ##
- images can be scaled without decreasing quality or increasing filesize.
- used as .xml
- good for simple images bad for complex images.

<div class="container">
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
    <rect x=0 y=0 width=100 height=100 fill="burlywood"/>
    <path d="M 10 10 H 90 V 90 L 10 60" fill="transparent" stroke="black" stroke-width="3"/>
  <circle cx=50 cy=50 r=20 class="svg-circle"/>
    <g class="svg-text-group">
      <text x="20" y="25" rotate="10" id="hello-text">Hello!</text>
      <use href="#hello-text" x="-10" y="65" fill="white"/>
    </g>
</svg>
</div>

- xmlns refers to dialect of svg being used.
- viewbox defines bounds including aspect ratio and origin.
- Elements such as <circle>, <rect>, <path>, and <text> are defined by the SVG namespace.

- svg can used ith <img> or linking with css background-image: url(./my-image.svg); 
- ilining to display content but slows html due to extra code being written.

## Tables ##

<table>
  <tr>
    <th>First Header</th>
    <th>Second Header</th>
  </tr>
  <tr>
    <td>This is a data cell</td>
    <td>This is also a data cell!</td>
  </tr>
</table>

- td is to enter data in table.
- th is to make headings.
- tr is to separate rows/create rows.
- use colspan="" to make th use specicifed number of columns.
- use rowspan="" to make th use specified number of rows.
- <colgroup>
    <col>
    <col style="">
  </colgroup>
 
 to style just the second column, or if style is to applied on both column just use one col and span="2".

- <caption> just below <table> to give table a caption.
- thead for headings, tbody for body, tfoot for last row.
- scope: row for row heading,col for col heading,colgroup and colspan for main heading,rowgroup and rowspan

<thead>
  <tr>
    <th id="clothes" colspan="3">Clothes</th>
  </tr>
  <tr>
    <th id="trousers" headers="clothes">Trousers</th>
    <th id="skirts" headers="clothes">Skirts</th>
    <th id="dresses" headers="clothes">Dresses</th>
  </tr>
</thead>
<tbody>
  <tr>
    <th id="belgium" rowspan="3">Belgium</th>
    <th id="antwerp" headers="belgium">Antwerp</th>
    <td headers="antwerp belgium clothes trousers">56</td>
    <td headers="antwerp belgium clothes skirts">22</td>
    <td headers="antwerp belgium clothes dresses">43</td>
  </tr>
</tbody>

## FORMS ##
-forms deals with the input user deals in the page.
-action attribute of form sends data to an url i.e usually backennd.
-method attribute tells browser which HTTP request method is to be used i.e GET and POST.
-GET is to get data from server. POST is to send data to server.

<form action="example.com/path" method="post">

</form>


-Form control elements: text box, dropdown, checkboxes and button.

<form action="example.com/path" method="post">
  <label for="first_name">First Name:</label>
  <input type="text" id="first_name" placeholder="Saeed..">
</form>
-input element requires type.
-text input accept any text input.
-label is basically Enter Email: input
-to for main jo defined id hogi us per label lag jayega.
-placeholder give exmaple of an input to user.

<label for="first_name">First Name:</label>
<input type="text" id="first_name" name="first_name">

-name is used to add label in backend storage
-in backend it looks like this:
"form": {
    
    "first_name": "John"
    
  },


-email type only accepts valid emails
-password type makes text hidden
-number accepts only number
-date types acceps dates.

-for big texts like user reviews and comments we use textarea.
<textarea rows="20" cols="60"></textarea>

-Selection dropdown menu:
<select name="fashion">
  <optgroup label="Clothing">
    <option value="t_shirt" selected>T-Shirts</option>
    <option value="sweater">Sweaters</option>
    <option value="coats">Coats</option>
  </optgroup>
  <optgroup label="Foot Wear">
    <option value="sneakers">Sneakers</option>
    <option value="boots">Boots</option>
    <option value="sandals">Sandals</option>
  </optgroup>
</select>
-we use selected for default option.  


-rADIO: Selecting one option at a time:
<h1>Ticket Type</h1>
<div>
  <input type="radio" id="child" name="ticket_type" value="child">
  <label for="child">Child</label>
</div>

<div>
  <input type="radio" id="adult" name="ticket_type" value="adult" checked>
  <label for="adult">Adult</label>
</div>

<div>
  <input type="radio" id="senior" name="ticket_type" value="senior">
  <label for="senior">Senior</label>
</div>
-use checked for deault option
-use type as checkbox to select multiple options at a time

-Buttons type:
submit is default type when form is submitted
reset type resets form into original state


-The fieldset element is a container element that allows us to group related form
<fieldset>
  <legend>Contact Details</legend>

  <label for="name">Name:</label>
  <input type="text" id="name" name="name">

  <label for="phone_number">Phone Number:</label>
  <input type="tel" id="phone_number" name="phone_number">

  <label for="email">Email:</label>
  <input type="email" id="email" name="email">
</fieldset>

-legend is like label for fieldset

-required validation
<input type="password" id="user_password" name="user_password" required>

-minimum length:
<textarea placeholder="What's happening?" minlength="3"></textarea>
-similary maxlength for maximum length

-min/max value limitation:
<input type="number" id="quantity" name="quantity" min="1" value="0">

-styling valid or invalid output using css:
input:invalid {
  border-color: red;
}

input:valid {
  border-color: green;
}






























