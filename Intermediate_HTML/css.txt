## UNITS ##

Absolute Units: Always same, doesn't changes like px,in,cm
Relative Units: Changes based on their conext like em, rem

em changes related to parent element
rem changes related to root HTML element

The units vh and vw relate to the size of the viewport. 
Specifically, 1vh is equal to 1% of the viewport height and 1vw is equal to 1% of the viewport width. 

## TEXT STYLES ##

-Using Stacks to find font-family installed on pc like:
body {
  font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

-One popular and easy method to get fonts that are not installed on a userâ€™s device is to use an online font library.

<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">

or at the top of css file:

@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

or download the font from web and

@font-face {
  font-family: my-cool-font;
  src: url(../fonts/the-font-file.woff);
}

h1 {
  font-family: my-cool-font, sans-serif;
}

font-style: italics;
letter-spacing: for space between letters
line-height: for space between lines
text-transform: for applying property to full text like capitalize,lower case,upper case etc.

/* offset-x | offset-y | blur-radius | color */
text-shadow: 1px 1px 2px black;

ellipses:
.overflowing {
  white-space: nowrap; forces text to be on single line
  overflow: hidden; if text bigger than boundary then it will not be displayed
  text-overflow: ellipsis; replaces hidden text with '...'
}

## MORE CSS PROPERTIES ##

-background is shortform for 8 different properties:

background-attachment background scrolls with element or not
background-clip
background-color
background-image
background-origin
background-position
background-repeat
background-size

-border deals with style,size and color 
-border-radius  rounds the corners of an element's outer border edge.
-box-shadow adds shadow around element frame

-overflow what happens to text when it overflows 
values: visible,scroll,clip,hidden,auto

-opacity: background of element kitna dark/light ho.

## Selectors ##

> - the child combinator
+ - the adjacent sibling combinator
~ - the general sibling combinator

<main class="parent">
  <div class="child group1">
    <div class="grand-child group1"></div>
  </div>
  <div class="child group2">
    <div class="grand-child group2"></div>
  </div>
  <div class="child group3">
    <div class="grand-child group3"></div>
  </div>
</main>

/* The divs with the class "child" will get selected by this */
main > div {
  /* Our cool CSS */
}

/* The divs with the class "grand-child" will get selected by this */
main > div > div {
  /* More cool CSS */
}

/* Only the div with the classes "child group2" will get selected by this */
.group1 + div {
  /* Our cool CSS */
}

/* Only the div with the classes "child group3" will get selected by this */
.group1 + div + div {
  /* More cool CSS */
}

/* All of .group1's div siblings - in this case the 2nd and 3rd .child divs, will get selected by this */
.group1 ~ div {
  /* Our cool CSS */
}

-Pseudo Classes:
1. :focus applies to an element selected by user using mouse/keyboard
2. :active applies to elements that are being clicked
3. :hover applies to element when pointer is hovered over them.
4. :link applies to unvisited links
5. :visited applies to visited links

Sample Code:

  /* This rule will apply to all links */
  a {
    text-decoration: underline;
  }

  /* This will apply to unvisited links */
  a:link {
    color: blue;
  }

  /* And you guessed it, this applies to all links the user has clicked on */
  a:visited {
    color: purple;
  }


-Structural Pseudo Classes:
1. :root the element with no parents for global css rules.
2. :first-child and :last-child will match elements that are the first or last sibling.
3. :empty  elements that have no children and :only-child will match elements that have no siblings.
4. .myList:nth-child(5) {/* Selects the 5th element with class myList */}

  .myList:nth-child(3n) { /* Selects every 3rd element with class myList */}

  .myList:nth-child(3n + 3) { /* Selects every 3rd element with class myList, beginning with the 3rd */}

  .myList:nth-child(even) {/* Selects every even element with class myList */}

-Pseudo Elements: deals with something that are not elements
1. ::marker styles <li> elements
2. ::first-letter and ::first-line styles letter or line of text
3. ::selection change highlighting when user selects text on page
4. ::before and ::after 
<style>
  .emojify::before {
    content: 'ðŸ˜Ž ðŸ¥¸ ðŸ¤“';
}

  .emojify::after {
    content: 'ðŸ¤“ ðŸ¥¸ ðŸ˜Ž';
}
</style>

<body>
  <div> Let's <span class="emojify">emojify</span>this span!</div>
</body>

-Attribute Selectors:
src and href are examples of attributes

  [src] {
    /* This will target any element that has a src attribute. */
  }

  img[src] {
    /* This will only target img elements that have a src attribute. */
  }

  img[src="puppy.jpg"] {
    /* This will target img elements with a src attribute that is exactly "puppy.jpg" */
  }

## POSITIONING ##
Static position is default position of element and top,left,right,bottom have no effect.

Relative position moves element with top,right,bottom,left properties 

position: absolute allows you to position something at an exact point on the screen using properties doesnt disturb other elements

fixed position elements are placed relative to viewport. scrolling will not remove it

sticky position act like normal elements until they are past scroll so they act like fixed position

## CSS Functions ##
1. calc()

:root {
--header: 3rem;
--footer: 40px;
--main: calc(100vh - calc(var(--header) + var(--footer)));
}

is equivalent to 100vh - (3rem + 40px)

2. min()

#iconHolder {
  width: min(150px, 100%);
  height: min(150px, 100%);
  box-sizing: border-box;
  border: 6px solid blue;
}

if 150px available then take it else choose 100% of parent's width

3. max()

width: max(100px, 4em, 50%);

max will select the largest One

4. clamp()
h1 {
  font-size: clamp(320px, 80vw, 60rem);
}

the smallest value (320px)
the ideal value (80vw)
the largest value (60rem)

the smallest acceptable font-size would be 320px and the largest would be 60rem. The ideal font-size would be 80vw.

## Custom Properties ##

.error-modal {
  --color-error-text: red;
  --modal-border: 1px solid black;
  --modal-font-size: calc(2rem + 5vw);

  color: var(--color-error-text);
  border: var(--modal-border);
  font-size: var(--modal-font-size);
}

declared with -- followed by kabab name and then assigned any css values
to access custom propert we use var() Functions
var accepts 2 parameters, first the property secondly the value incase current value in invalid

.fallback {
  --color-text: white;

  background-color: var(--undeclared-property, black);
  color: var(--undeclared-again, var(--color-text, yellow));
}

-Scope:
<div class="cool-div">
  <p class="cool-paragraph">Check out my cool, red background!</p>
</div>

<p class="boring-paragraph">I'm not in scope so I'm not cool.</p>

.cool-div {
  --main-bg: red;
}

.cool-paragraph {
  background-color: var(--main-bg);
}

.boring-paragraph {
  background-color: var(--main-bg);
}

basically jahan variable bna ha udher hi use hoskta ha
so we can make variables in :root{} so that they can be used everywhere

stuff about themes







