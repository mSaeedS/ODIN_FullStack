<div class="container">
  <div>Item 1</div>
  <div>Item 2</div>
  <div>Item 3</div>
  <div>Item 4</div>
</div>

.container {
  display: grid;
}

-grid container has display: grid or display: inline-grid
-below elements of container become child elements

<div class="container">
  <div>Item 1</div>
  <div>Item 2
    <p>I am not a grid item!</p>
  </div>
  <div>Item 3</div>
  <div>Item 4</div>
</div>
-only direct child are grid children
-grid items can also become containers

-The properties grid-template-columns and grid-template-rows define space between lines on grid.
.container {
  display: grid;
  grid-template-columns: 50px 50px 50px;
  grid-template-rows: 50px 50px;
}
-in this we have 3 columns and 2 rows

OR 

.container {
  display: grid;
  grid-template: 50px 50px / 50px 50px 50px;
}

-we can use grid-template, before slash are rows and after slah are columns.
-this is called explicit grid tracks.
-implicit grid tracks are when you define 2x2 but add 5th item, so the 5th item is implicit.
-We can set the implicit grid track sizes using the grid-auto-rows and grid-auto-columns

/* styles.css */

.container {
  display: grid;
  grid-template-columns: 50px 50px;
  grid-template-rows: 50px 50px;
  grid-auto-rows: 50px;
}

-we use column-gap/row-gap/gap (for both rows and colum) to set gaps between them

-Every track has a start line and an end line. The lines are numbered from left to right and top to bottom starting at 1. So our 3x3 grid above has vertical lines for columns ranging from 1 to 4 and horizontal lines for rows ranging from 1 to 4.
-cells are space of item. intersection of row and column
.container {
  display: inline-grid;
  grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
  background-color: lightblue; 
}

.room {
  border: 1px solid;
  font-size: 50%;
  text-align: center;
}

#living-room {
  grid-column-start: 1;
  grid-column-end: 6;
grid-row-start: 1;
  grid-row-end: 3; 
}

-start begins item first line and end is where the grid extends to.

.container {
  display: inline-grid;
  grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
  background-color: lightblue; 
}

.room {
  border: 1px solid;
  font-size: 50%;
  text-align: center;
}

#living-room {
  grid-column-start: 1;
  grid-column-end: 6;
  grid-row-start: 1;
  grid-row-end: 3;
}

#kitchen {
  grid-column: 4 / 6;
  grid-row: 3 / 6;
}

#bedroom {
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 3;
  grid-row-end: 5;
}

#bathroom {
  grid-column-start: 1;
  grid-column-end: 2;
  grid-row-start: 3;
  grid-row-end: 6;
}

#closet {
  grid-column-start: 2;
  grid-column-end: 4;
  grid-row-start: 5;
  grid-row-end: 6;
}

-in kitchen shorthand is used grid-row grid-column
-even more shorthand: grid-area: 1 / 1 / 3 / 6; row and col start, then row and col end

.container {
  display: inline-grid;
  grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
  background-color: lightblue; 
  grid-template-areas:
    "living-room living-room living-room living-room living-room"
    "living-room living-room living-room living-room living-room"
    "bedroom bedroom bathroom kitchen kitchen"
    "bedroom bedroom bathroom kitchen kitchen"
    "closet closet bathroom kitchen kitchen"    
}

.room {
  border: 1px solid;
  font-size: 50%;
  text-align: center;
}

#living-room {
   grid-area:  living-room;
}

#kitchen {
  grid-area: kitchen;
}

#bedroom {
  grid-area: bedroom;
}

#bathroom {
  grid-area: bathroom;
}

#closet {
  grid-area: closet;
}

-grid-template-area main basically cells defined kro in each row main kitne column
-baqi empty cells keliye use dot . . .

-resize: both;allows the user to resize the container by clicking and dragging from the bottom right corner.
-overflow: auto; to enable scrolling if we resize the container to be smaller than our grid can accommodate.

.grid-container {
  grid-template-rows: repeat(2, 150px);
  grid-template-columns: repeat(5, 150px);
}

-so repeat func repeats row 150px twice and 150px 55 times for col
-using fr instead of px will force grid items to fill up the entire width and height of the grid
-repeat can be ued twice
.grid-container {
  resize: both;
  overflow: auto;
  display: grid;
  gap: 4px;
  padding: 4px;
  border: 1px solid grey;
  background-color: skyblue;
  grid-template-rows: repeat(2, 1fr);
  grid-template-columns: repeat(2, 2fr) repeat(3, 1fr);
}

.grid-item {
  background-color: #444;
  text-align: center;
  color: #ddd;
  font-family: sans-serif;
  font-size: 1.5rem;
  padding: 12px;
}

p {
  margin: 12px auto 24px;
}

img {
  height: 60px;
}


-dynamic min and max track size:
.grid-container {
  grid-template-rows: repeat(2, min(200px, 50%));
  grid-template-columns: repeat(5, max(120px, 15%));
}
-basically 200pxaur 50% of of total veritcal length ka min

-minmax()
-It is a relatively straightforward function that only takes in two arguments:
The minimum size the grid track can be
The maximum size the grid track can be

-clamp(minimum-size, ideal-size, maximum-size)

-.example {
  display: grid;
  width: 1000px;
  grid-template-columns: repeat(auto-fit, 200px);
}
to 200px ke 5 cols ban jayenge

